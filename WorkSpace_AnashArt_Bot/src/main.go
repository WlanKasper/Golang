/*
 ------------------- –ó–ê–î–ê–ß–ò -------------------
 –û—Å–Ω–æ–≤–Ω—ã–µ:
	–ü–µ—Ä–µ–¥–∞–ª–∞—Ç—å –ø–æ–¥ webhook

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
	–î–æ–¥–µ–ª–∞—Ç—å –°–∏—Å—Ç–µ–º—É –ê–¥–º–∏–Ω–æ–≤
 ----------------------------------------------
*/

package main

// ------------------- IMPORTS -------------------
import (
	"io/ioutil"
	"log"

	"AnashArt.bot/db"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// ------------------- CONSTS -------------------
const botAPI = "5015857552:AAGHOqwNAeeJ4Su0Rnlu9UOAz6MaO3IDpng"

const octopusPATH = "img/octopus.jpg"
const shrimpPATH = "img/shrimp.jpg"

const wlankasperID = 853634511
const anasharmsID = 726736906

// ------------------- KEYBOARDS-------------------
// --------- ORDER CHOICE SYSTEM ---------
var OrderSystem = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–í Telegram", "Telegram"),
		tgbotapi.NewInlineKeyboardButtonURL("–í Insagram", "https://www.instagram.com/anash.art/"),
	),
)

// --------- ORDER CHOICE PRINT ---------
var OrderPrint = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ú–û–ö–†–ò–ô", "–ú–û–ö–†–ò–ô"),
		tgbotapi.NewInlineKeyboardButtonData("–ö–†–ï–í–≠–î", "–ö–†–ï–í–≠–î"),
	),
)

// --------- ORDER CHOICE SIZE ---------
var OrderSize = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("S", "S"),
		tgbotapi.NewInlineKeyboardButtonData("M", "M"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("L", "L"),
		tgbotapi.NewInlineKeyboardButtonData("XL", "XL"),
	),
)

// --------- ORDER CHOICE PAYMENT ---------
var OrderPayment = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		// tgbotapi.NewInlineKeyboardButtonData("Telegram Pay", "TelegramPay"),
		tgbotapi.NewInlineKeyboardButtonData("–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É", "–ü–µ—Ä–µ–≤–æ–¥"),
	),
)

// ------------------------------------ ADMIN KEYBOARDS ------------------------------------
// --------- ADMIN SETTINGS ---------
var AdminSettings = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–Ω—Ç", "NewPrint"),
		tgbotapi.NewInlineKeyboardButtonData("–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä", "NewSize"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–î–æ–±–∞–≤–∏—Ç—å —Ü–≤–µ—Ç", "NewColor"),
		tgbotapi.NewInlineKeyboardButtonData("–î–æ–±–∞–≤–∏—Ç—å –ª–æ—Ç", "NewLot"),
	),
)

// ------------------- MAPS -------------------
var OrderInfoMap map[int64]*db.OrderInfo
var Products_db map[string]*db.Products
var InputState int = 0

// ------------------- FUNCS -------------------
func init() {
	OrderInfoMap = make(map[int64]*db.OrderInfo)
	Products_db = make(map[string]*db.Products)
}

func main() {

	// --------- INIT BOT ---------
	bot, err := tgbotapi.NewBotAPI(botAPI)
	if err != nil {
		log.Panic(err)
	}
	bot.Debug = true
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	// --------- CHECK NEW MESSAGE LOOP ---------
	for update := range updates {

		standartSendMessage := func(msg tgbotapi.MessageConfig) {
			if _, err = bot.Send(msg); err != nil {
				panic(err)
			}
		}

		standartCallbackCheck := func() {
			callback := tgbotapi.NewCallback(update.CallbackQuery.ID, update.CallbackQuery.Data)
			if _, err := bot.Request(callback); err != nil {
				panic(err)
			}
		}

		orderSetSize := func(size string) {
			standartCallbackCheck()
			OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Size = size
			msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email")
			standartSendMessage(msg)

			InputState = 5
		}

		orderSetPrint := func(print string) {
			standartCallbackCheck()
			OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Print = print
			msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–π —Ä–∞–∑–º–µ—Ä")
			msg.ReplyMarkup = OrderSize
			standartSendMessage(msg)
		}

		sendPhoto := func(path string) {
			photoBytes, err := ioutil.ReadFile(path)
			if err != nil {
				panic(err)
			}
			photoFileBytes := tgbotapi.FileBytes{
				Name:  "picture",
				Bytes: photoBytes,
			}
			bot.Send(tgbotapi.NewPhoto(update.Message.Chat.ID, photoFileBytes))
		}

		if update.Message != nil {
			if update.Message.IsCommand() {
				if update.Message.Command() == "start" {
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç AnashArt –∏ –≤–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n  /start - –ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é üßæ\n  /show - –ü–æ–∫–∞–∂—É –≤—Å–µ –Ω–∞—à–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ‚ú®\n  /price - –ü–æ–∫–∞–∂—É –ü—Ä–∞–π—Å-–õ–∏—Å—Ç üí∏\n  /order - –û—Ñ–æ—Ä–º–ª—é –∑–∞–∫–∞–∑ üì¶\n  /help - –ü–æ–∑–æ–≤—É –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚ÅâÔ∏è\n\n–ù–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç: https://AnashArt.ru\n–ù–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Instagram: https://www.instagram.com/anash.art/")
					standartSendMessage(msg)

				} else if update.Message.Command() == "show" {
					sendPhoto(octopusPATH)
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–∏–Ω—Ç –ú–û–ö–†–ò–ô")
					standartSendMessage(msg)

					sendPhoto(shrimpPATH)
					msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–∏–Ω—Ç –ú–û–ö–†–ò–ô")
					standartSendMessage(msg)

				} else if update.Message.Command() == "help" {
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ...")
					standartSendMessage(msg)

					bot.Send(tgbotapi.NewMessage(wlankasperID, "PROBLEM @"+update.Message.From.UserName))
					bot.Send(tgbotapi.NewMessage(anasharmsID, "PROBLEM @"+update.Message.From.UserName))

				} else if update.Message.Command() == "price" {
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "Price List:\n\n  –§—É—Ç–±–æ–ª–∫–∞ '–ú–û–ö–†–ò–ô' - 3590\n  –§—É—Ç–±–æ–ª–∫–∞ '–ö–†–ï–í–≠–î' - 3590")
					standartSendMessage(msg)

				} else if update.Message.Command() == "order" {
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —á—Ç–æ –ª–∏–±–æ –ø—Ä—è–º–æ –∑–¥–µ—Å—å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ –Ω–∞—à–µ–º Instagram")
					msg.ReplyMarkup = OrderSystem
					standartSendMessage(msg)

				} else if update.Message.Command() == "admin" && update.Message.Chat.ID == wlankasperID || update.Message.Chat.ID == wlankasperID {
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç –ù–∞—Å—Ç—å)")
					msg.ReplyMarkup = AdminSettings
					standartSendMessage(msg)

				} else {
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–Ø –¥–∞–∂–µ –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å(")
					standartSendMessage(msg)
				}

			} else if InputState != 0 {
				switch InputState {
				case 1:
					Products_db[update.Message.Text] = new(db.Products)
					Products_db[update.Message.Text].PrintName = update.Message.Text
					InputState = 0

				case 2:

				case 3:

				case 4:

					// --------- EMAIL---------
				case 5:
					OrderInfoMap[update.Message.Chat.ID].Email = update.Message.Text

					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—Ç–ª–∏—á–Ω–æ, –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!\n\n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n–ì–æ—Ä–æ–¥, –£–ª–∏—Ü–∞, –î–æ–º, –ù–æ–º–µ—Ä_—Ç–µ–ª–µ—Ñ–æ–Ω–∞_–¥–ª—è_—Å–≤—è–∑–∏")
					standartSendMessage(msg)
					InputState = 6

					// --------- ADDRES---------
				case 6:
					OrderInfoMap[update.Message.Chat.ID].Addres = update.Message.Text

					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –∑–∞–∫–∞–∑ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã\n\n–í–∞—à –∑–∞–∫–∞–∑:\n–ü—Ä–∏–Ω—Ç - "+OrderInfoMap[update.Message.Chat.ID].Print+"\n–†–∞–∑–º–µ—Ä - "+OrderInfoMap[update.Message.Chat.ID].Size+"\nEmail - "+OrderInfoMap[update.Message.Chat.ID].Email+"\n–î–æ—Å—Ç–∞–≤–∫–∞ - "+OrderInfoMap[update.Message.Chat.ID].Addres)
					msg.ReplyMarkup = OrderPayment
					standartSendMessage(msg)

					InputState = 0
				}

			} else {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–Ø –¥–∞–∂–µ –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å(")
				standartSendMessage(msg)
			}
		}

		if update.CallbackQuery != nil {
			switch update.CallbackQuery.Data {

			case "Telegram":
				standartCallbackCheck()

				OrderInfoMap[update.CallbackQuery.Message.Chat.ID] = new(db.OrderInfo)
				OrderInfoMap[update.CallbackQuery.Message.Chat.ID].UserName = update.CallbackQuery.From.UserName

				msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–í—ã–±–∏—Ä–∞–π –∫–∞–∫–æ–π –ø—Ä–∏–Ω—Ç —Ç—ã —Ö–æ—á–µ—à—å")
				msg.ReplyMarkup = OrderPrint
				standartSendMessage(msg)

			case "–ú–û–ö–†–ò–ô":
				orderSetPrint("–ú–û–ö–†–ò–ô")

			case "–ö–†–ï–í–≠–î":
				orderSetPrint("–ö–†–ï–í–≠–î")

			case "S":
				orderSetSize("S")

			case "M":
				orderSetSize("M")

			case "L":
				orderSetSize("L")

			case "XL":
				orderSetSize("XL")

			case "–ü–µ—Ä–µ–≤–æ–¥":
				standartCallbackCheck()

				OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Payment = "–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É"
				msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–°–±–µ—Ä–ë–∞–Ω–∫ - 1000 1000 1000 1000\n–¢–∏–Ω—å–∫–æ—Ñ—Ñ - 1000 1000 1000 1000\n\n–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤–∞–º –Ω–∞–ø–∏—à–µ—Ç –Ω–∞—à –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ –∏ —Å–æ–æ–±—â–∏—Ç –±–ª–∏–∂–∞–π—â—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏")
				standartSendMessage(msg)

				msg = tgbotapi.NewMessage(wlankasperID, "NEW ORDER\n\nName: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].UserName+"\nEmail: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Email+"\nAddres: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Addres+"\nPrint: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Print+"\nSize: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Size+"\nPayment: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Payment+"\nStatus: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Status)
				standartSendMessage(msg)

				msg = tgbotapi.NewMessage(anasharmsID, "NEW ORDER\n\nName: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].UserName+"\nEmail: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Email+"\nAddres: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Addres+"\nPrint: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Print+"\nSize: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Size+"\nPayment: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Payment+"\nStatus: "+OrderInfoMap[update.CallbackQuery.Message.Chat.ID].Status)
				standartSendMessage(msg)

				// ------------------------------------ CALLBACK FOR ADMIN ------------------------------------
			case "NewPrint":
				standartCallbackCheck()
				msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ç–∞: ")
				standartSendMessage(msg)

				InputState = 1

			case "NewSize":
				standartCallbackCheck()
				msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–í–≤–µ–¥–∏ —Ä–∞–∑–º–µ—Ä (–ó–∞–≥–ª–∞–≤–Ω—ã–º–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏: S, XLL, ...): ")
				standartSendMessage(msg)

				InputState = 2

			case "NewColor":
				standartCallbackCheck()

			case "NewLot":
				standartCallbackCheck()

			}
		}
	}
}
